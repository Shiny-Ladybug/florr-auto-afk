# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build Python
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  pyinstaller-build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract version from constants.py
        id: get_version
        shell: python
        run: |
          import re
          with open('constants.py', 'r') as f:
              content = f.read()
          match = re.search(r'VERSION_INFO\s*=\s*"([^"]+)"', content)
          if not match:
              raise ValueError("VERSION_INFO not found in constants.py")
          print(f"::set-output name=version::{match.group(1)}")

      - name: Install pywin32
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install pywin32

      - name: Install dependencies
        shell: powershell
        run: |
          pip install -r py311-requirements.txt
          pip install pyinstaller
      
      - name: Run PyInstaller
        shell: powershell
        run: |
          python -m PyInstaller segment.spec

      - name: Creating Compressed Executable
        shell: powershell
        run: |
          Copy-Item -Path ./config.json -Destination ./dist/segment/config.json
          New-Item -Path ./dist/segment/imgs -ItemType Directory
          Copy-Item -Path ./imgs/test.png -Destination ./dist/segment/imgs/test.png
          Copy-Item -Path ./models -Destination ./dist/segment/models -Recurse
          Copy-Item -Path ./gui -Destination ./dist/segment/gui -Recurse
          echo "Compressing ./dist/segment directory into a ZIP file..."
          Compress-Archive -Path ./dist/segment/* -DestinationPath ./dist/florr-auto-afk-v${{ steps.get_version.outputs.version }}.zip

      - name: Upload Executable to Release
        if: ${{ github.event_name == 'push' }}  # Only run on push events
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a new release using the extracted version
          gh release create "v${{ steps.get_version.outputs.version }}" \
            --title "Release v${{ steps.get_version.outputs.version }}" \
            --notes "Automated release for version v${{ steps.get_version.outputs.version }}" \
            --target main
          # Upload the ZIP file to the release
          gh release upload "v${{ steps.get_version.outputs.version }}" "./dist/florr-auto-afk-v${{ steps.get_version.outputs.version }}.zip" --clobber